syntax = "proto3";

package llmariner.files.server.v1;

import "google/api/annotations.proto";

option go_package = "github.com/llmariner/file-manager/api/v1";

// The API specification fllows OpenAPI API specification (https://platform.openai.com/docs/api-reference/files).
//
// TODO(kenji): Some of the API endpoints will not be implemented efficiently. Consider providing
// an extra API for just managing the metadata.


message File {
  string id = 1;
  int64 bytes = 2;
  int64 created_at = 3;
  string filename = 4;
  string object = 5;
  string purpose = 6;
}

message ListFilesRequest {
  // purpose is used to filter the files by their purpose. Optional.
  string purpose = 1;
  // after is the identifier for the last job from the previous pagination request.
  string after = 2;
  // limit is the number of fine-tuning jobs to retrieve. Defaults to 20.
  int32 limit = 3;
  // order is set to either 'asc' or 'desc' to sort objects by their created_at timestamp.
  string order = 4;

}

message ListFilesResponse {
  string object = 1;
  repeated File data = 2;

  bool has_more = 3;

  // total_items is the total number of batch jobs. This is not defined in the
  // OpenAI API spec, but we include here for better UX in the frontend.
  int32 total_items = 4;
}

message GetFileRequest {
  string id = 1;
}

message DeleteFileRequest {
  string id = 1;
}

message DeleteFileResponse {
  string id = 1;
  string object = 2;
  bool deleted = 3;
}

message CreateFileFromObjectPathRequest {
  // The object path is the path to the object in the object storage.
  string object_path = 1;
  string purpose = 2;
}

service FilesService {
  // File upload and download are implemented without gRPC gateway.

  rpc ListFiles(ListFilesRequest) returns (ListFilesResponse) {
    option (google.api.http) = {
      get: "/v1/files"
    };
  }

  rpc GetFile(GetFileRequest) returns (File) {
    option (google.api.http) = {
      get: "/v1/files/{id}"
    };
  }

  rpc DeleteFile(DeleteFileRequest) returns (DeleteFileResponse) {
    option (google.api.http) = {
      delete: "/v1/files/{id}"
    };
  }

  // CreateFileFromObjectPath creates a file from the object path in the object storage without
  // actually uploading the file. This is mainly added to allow the worker cluster to access
  // files without giving the access privilege to the object storage to the control plane.
  rpc CreateFileFromObjectPath(CreateFileFromObjectPathRequest) returns (File) {
    option (google.api.http) = {
      post: "/v1/files:createFromObjectPath"
      body: "*"
    };
  }

}

message GetFilePathRequest {
  string id = 1;
}

message GetFilePathResponse {
  string path = 1;
  string filename = 2;
}

service FilesWorkerService {
  rpc GetFilePath(GetFilePathRequest) returns (GetFilePathResponse) {
  }
}

service FilesInternalService {
  rpc GetFilePath(GetFilePathRequest) returns (GetFilePathResponse) {
  }
}
